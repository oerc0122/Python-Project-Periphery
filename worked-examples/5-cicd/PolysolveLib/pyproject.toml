[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "polysolve"
authors = [{name = "Me", email = "me@me.com"}]
requires-python = ">= 3.8"
readme = "README.md"
description = "A module for solving quadratic/cubic equations."
license = {text = "BSD-3-Clause"}

keywords = ["quadratic", "cubic", "polynomial"]
dependencies = ["cowsay"]
classifiers = []
dynamic = ["version"]

[project.urls]
Homepage="https://github.com/XXX/polysolve"
Repository="https://github.com/XXX/polysolve.git"

[tool.setuptools.dynamic]
version = {attr = "polysolve.__version__"}

[project.optional-dependencies]
docs = [
    "sphinx",
    "sphinx_rtd_theme",
    "sphinx_autodoc_typehints",
]
test = ["pytest"]

[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
preview = true
select = [
    "PL",  # Pylint
    "E",   # Pycodestyle
    "W",   # Pycodestyle warnings
    "F",   # Pyflakes
    "B",   # Flake8 bugbear
    "SIM", # Flake8 Simplify
    "A",   # Flake8 builtins
    "COM", # Flake8 commas
    "ISC", # Flake8 implicit string concat
    "RSE", # Flake8 raise
    "FA",  # Flake8 future
    "FBT", # Flake8 boolean trap
    "C4",  # Flake8 comprehensions
    "Q",   # Flake8 Quotes
    "RET", # Flake8 return
    "ARG", # Flake8 unused args
    "PTH", # Flake8 use pathlib
    "YTT", # Flake8 2020
    "ANN", # Flake8 annotations
    "BLE", # Flake8 Blind except
    "C4",  # Flake8 comprehensions
    "T10", # Flake8 debugger statements
    "T20", # Flake8 Print
    "FIX", # Flake8 Fixme
    "LOG", # Flake8 Logging
    "G",   # Flake8 Logging format
    "PIE", # Flake8 Pie
    "I",   # Isort
    "PERF",# Perflint
    "RUF", # Ruff specific
    "FURB",# Refurb
    "PERF",# Perflint
    "D",   # Pydocstyle
    "DOC", # Pydoclint
    "UP",  # Pyupgrade
]
ignore = [
    "PLR0912",  # Too many branches
    "PLR0913",  # Too many arguments
    "PLR0914",  # Too many locals
    "PLR0915",  # Too many statements
    "PLW2901",  # For loop variable overwritten
    "PLR2004",  # Magic constant value
    "D105",     # Magic method doc
    "ANN401",   # No typing.Any
]
allowed-confusables = ["α", "β", "γ"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"



[tool.isort]
profile = "black"

[tool.numpydoc_validation]
checks = [
    "all",   # report on all checks, except the below
    "EX01",
    "SA01",
    "ES01",
]
# remember to use single quotes for regex in TOML
exclude = [  # don't report on objects that match any of these regex
    '\.undocumented_method$',
    '\.__[^.]*__$',
]
override_SS05 = [  # override SS05 to allow docstrings starting with these words
    '^Process ',
    '^Assess ',
    '^Access ',
    '^Class ',
]
